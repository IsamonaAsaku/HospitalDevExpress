//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalDevexpress.Service_Hospital {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Service_Hospital.IHospitalService", CallbackContract=typeof(HospitalDevexpress.Service_Hospital.IHospitalServiceCallback))]
    public interface IHospitalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHospitalService/Subscribe", ReplyAction="http://tempuri.org/IHospitalService/SubscribeResponse")]
        void Subscribe(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHospitalService/Subscribe", ReplyAction="http://tempuri.org/IHospitalService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IHospitalService/Unsubscribe")]
        void Unsubscribe(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IHospitalService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync(string clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHospitalService/SendMessage", ReplyAction="http://tempuri.org/IHospitalService/SendMessageResponse")]
        void SendMessage(string senderId, string message, string recieverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IHospitalService/SendMessage", ReplyAction="http://tempuri.org/IHospitalService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string senderId, string message, string recieverId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHospitalServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IHospitalService/Notification")]
        void Notification(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IHospitalServiceChannel : HospitalDevexpress.Service_Hospital.IHospitalService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class HospitalServiceClient : System.ServiceModel.DuplexClientBase<HospitalDevexpress.Service_Hospital.IHospitalService>, HospitalDevexpress.Service_Hospital.IHospitalService {
        
        public HospitalServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public HospitalServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public HospitalServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HospitalServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public HospitalServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe(string clientId) {
            base.Channel.Subscribe(clientId);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(string clientId) {
            return base.Channel.SubscribeAsync(clientId);
        }
        
        public void Unsubscribe(string clientId) {
            base.Channel.Unsubscribe(clientId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(string clientId) {
            return base.Channel.UnsubscribeAsync(clientId);
        }
        
        public void SendMessage(string senderId, string message, string recieverId) {
            base.Channel.SendMessage(senderId, message, recieverId);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string senderId, string message, string recieverId) {
            return base.Channel.SendMessageAsync(senderId, message, recieverId);
        }
    }
}
